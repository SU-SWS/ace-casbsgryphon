version: 2
# CircleCI integration with Drupal 8.

# Reusable steps.

## Defines the cache restoring mechanism.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  restore_cache:
    keys:
      - cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}
      - cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "composer.json" }}-
      # fallback to using the latest cache if no exact match is found
      - cache-{{ .Environment.CACHE_VERSION }}-

## Defines the cache saving mechanism.
save_cache: &save_cache
  save_cache:
    paths:
      - ./vendor
      - ./docroot/core
      - ./docroot/libraries
      - ./docroot/modules
      - ./docroot/themes
      - ./docroot/profiles
    key: cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "composer.json" }}-{{ checksum "composer.lock" }}

## Add SSH Key
add_ssh: &add_ssh
  add_ssh_keys:
    fingerprints:
      - "e0:09:da:50:aa:57:c7:32:27:ef:69:f3:87:19:a8:7e"

## Add Known Hosts
add_known_hosts: &add_known_hosts
  run:
    name: Add SSH Known Hosts
    command: |
      ssh-keyscan svn-179.enterprise-g1.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan -t rsa,dsa github.com >> ~/.ssh/known_hosts

## Defines images and working directory.
defaults: &defaults
  docker:
    # The Dockerfile along side this config file contains the customizations
    # of juampynr/drupal8ci.
    # @see https://circleci.com/docs/2.0/custom-images/#creating-a-custom-image-manually
    - image: pookmish/drupal8ci:latest
    - image: selenium/standalone-chrome:latest
    - image: circleci/mysql:5.7
      environment:
        MYSQL_DATABASE: drupal
        MYSQL_USER: drupal
        MYSQL_PASSWORD: drupal
        MYSQL_ALLOW_EMPTY_PASSWORD: 1
  working_directory: /var/www/html

#Jobs
prep_tests: &prep_tests
  <<: *defaults
  steps:
    - checkout
    - *restore_cache
    - run:
        name: Directory Setup
        command: |
          composer clear-cache
          composer install --optimize-autoloader --no-interaction
          cp ./.circleci/simplesamlphp.config.php simplesamlphp/config/local.config.php
          blt blt:telemetry:disable --no-interaction
          blt sws:circleci:setup
          drush xmlsitemap-regenerate
          drush sql-dump > db.sql
    - run:
        name: linters
        command: |
          blt validate:acsf
    - *save_cache
    - persist_to_workspace:
        root: .
        paths:
          - .

### Job to do automated test environment deployments.
deploy_acsf_dev: &deploy_acsf_dev
  <<: *defaults
  steps:
    - checkout
    - *restore_cache
    - *add_ssh
    - *add_known_hosts
    - run:
        name: Deploy branch to ACSF test
        command: bash .circleci/deploy_code_dev.sh ${CIRCLE_BRANCH}
        no_output_timeout: 30m

### Job to run the update path and acceptance tests.
acceptance_tests: &acceptance_tests
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - run:
        name: Run Acceptance tests
        command: |
          dockerize -wait tcp://localhost:3306 -timeout 1m
          apachectl stop && apachectl start
          blt blt:telemetry:disable --no-interaction
          drush sql-cli < db.sql
          blt tests:codeception:run --suite=acceptance
    - store_test_results:
        path: artifacts
    - store_artifacts:
        path: artifacts

functional_tests: &functional_tests
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - run:
        name: Run Functional tests
        command: |
          dockerize -wait tcp://localhost:3306 -timeout 1m
          apachectl stop && apachectl start
          blt blt:telemetry:disable --no-interaction
          drush sql-cli < db.sql
          blt tests:codeception:run --suite=functional
    - store_test_results:
        path: artifacts
    - store_artifacts:
        path: artifacts

phpunit_coverage: &phpunit_coverage
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - run:
        name: Generate code coverage report
        command: |
          blt blt:telemetry:disable --no-interaction
          blt sws:circleci:phpunit:coverage
    - store_artifacts:
        path: artifacts
    - store_test_results:
        path: artifacts

## Job to deploy the current branch to Acquia hosting using BLT.
deploy_branch: &deploy_branch
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - *add_ssh
    - *add_known_hosts
    - run:
        name: Deploying branch to Acquia
        command: |
          git reset --hard
          git clean -d -f
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          blt blt:telemetry:disable --no-interaction
          blt deploy --no-interaction

deploy_tag: &deploy_tag
  <<: *defaults
  steps:
    - checkout
    - *add_ssh
    - *add_known_hosts
    - *restore_cache
    - run:
        name: Release Deployment
        command: |
          composer install --no-dev  --no-interaction
          git reset --hard
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          DATE=`date +%Y-%m-%d`
          blt blt:telemetry:disable --no-interaction
          blt deploy --tag=$(echo ${DATE}_${CIRCLE_TAG}) --commit-msg=$CIRCLE_TAG --no-interaction

## Job to create a new github release after a commit to master.
tag_and_release: &tag_and_release
  <<: *defaults
  steps:
    - checkout
    - *add_ssh
    - *add_known_hosts
    - *restore_cache
    - run:
        name: Create Github Tag and Release
        command: |
          composer install --no-dev  --no-interaction
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          blt blt:telemetry:disable --no-interaction
          blt sws:circleci:tag-and-release

stage_test_sites: &stage_test_sites
  <<: *defaults
  steps:
    - checkout
    - *add_ssh
    - *add_known_hosts
    - *restore_cache
    - run:
        name: Create Github Tag and Release
        command: |
          composer install --no-interaction
          blt blt:telemetry:disable --no-interaction
          blt cardinalsites:stage-sites "$ACSF_USER" "$ACSF_KEY"

# Declare all the jobs we should run.
jobs:
  run-prep:
    <<: *prep_tests
  run-acceptance-tests:
    <<: *acceptance_tests
  run-functional-tests:
    <<: *functional_tests
  run-phpunit-coverage:
    <<: *phpunit_coverage
  run-deploy-branch:
    <<: *deploy_branch
  run-deploy-tag:
    <<: *deploy_tag
  run-deploy-acsf-dev:
    <<: *deploy_acsf_dev
  run-tag-and-release:
    <<: *tag_and_release
  run-stage-sites:
    <<: *stage_test_sites

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  build_test_deploy:
    jobs:
      # Prepare the directory.
      - run-prep
      # Run the tests.
      - run-acceptance-tests:
          requires:
            - run-prep
      - run-functional-tests:
          requires:
            - run-prep
      - run-phpunit-coverage:
          requires:
            - run-prep
      # If the above jobs complete successfully, deploy the branch/tag.
      - run-deploy-branch:
          requires:
            - run-prep
            - run-acceptance-tests
            - run-functional-tests
            - run-phpunit-coverage
      - run-deploy-tag:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
  automated_dev_update:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - 3.x
    jobs:
      - run-deploy-acsf-dev
  stage_test_sites:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - 3.x
    jobs:
      - run-stage-sites
  tag_new_release:
    jobs:
      - run-tag-and-release:
          filters:
            branches:
              only: master
