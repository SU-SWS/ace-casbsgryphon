diff --git a/docroot/.htaccess b/docroot/.htaccess
index 4d19147..a43a44d 100644
--- a/docroot/.htaccess
+++ b/docroot/.htaccess
@@ -1,3 +1,54 @@
+# Block bad bots
+# See https://docs.acquia.com/cloud-platform/arch/security/restrict/#cloud-blocking-by-ip.
+<ifmodule mod_setenvif.c>
+# See https://support-acquia.force.com/s/case/5006g00000i7TdjAAE/continued-and-ongoing-service-disruption-on-multiple-applications
+SetEnvIf AH_CLIENT_IP ^146\.190\.24\.114$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^146\.190\.20\.213$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^146\.190\.20\.13$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^188\.166\.70\.114$ Deny_host
+# 10.19.2022
+SetEnvIf AH_CLIENT_IP ^159\.223\.3\.1$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^124\.120\.35\.211$ Deny_Host
+# 10.21.2022
+SetEnvIf AH_CLIENT_IP ^101\.35\.194\.201$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^103\.127\.57\.120$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.215\.177\.75$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.222\.30\.137$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.238\.83\.154$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.248\.116\.116$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.28\.124\.101$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.28\.124\.101$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^193\.239\.164\.105$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^87\.249\.134\.33$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^94\.102\.59\.165$ Deny_Host
+# 12.08.2022
+SetEnvIf AH_CLIENT_IP ^104\.248\.161\.147$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.248\.161\.74$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^104\.248\.175\.194$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^134\.209\.188\.129$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^134\.209\.188\.28$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^138\.68\.175\.84$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^139\.59\.161\.100$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^142\.93\.45\.60$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^157\.230\.80\.177$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^165\.232\.32\.74$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^167\.71\.132\.216$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^167\.99\.194\.186$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^167\.99\.198\.105$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^178\.128\.32\.144$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^178\.62\.13\.92$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^178\.62\.75\.10$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^188\.166\.171\.68$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^206\.189\.112\.143$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^46\.101\.1\.117$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^46\.101\.87\.51$ Deny_Host
+SetEnvIf AH_CLIENT_IP ^68\.183\.34\.96$ Deny_Host
+
+Order allow,deny
+Allow from all
+Deny from env=Deny_Host
+</ifmodule>
+
 #
 # Apache/PHP/Drupal settings:
 #
@@ -22,6 +73,9 @@ DirectoryIndex index.php index.html index.htm
 AddType image/svg+xml svg svgz
 AddEncoding gzip svgz
 
+# Add webp MIME type so that Apache knows how to handle WebP images
+AddType image/webp .webp
+
 # Most of the following PHP settings cannot be changed at runtime. See
 # sites/default/default.settings.php and
 # Drupal\Core\DrupalKernel::bootEnvironment() for settings that can be
@@ -67,6 +121,69 @@ AddEncoding gzip svgz
 <IfModule mod_rewrite.c>
   RewriteEngine on
 
+  # Block access via specific user-agents
+  RewriteCond %{HTTP_USER_AGENT} CQ-API-Spyder [NC]
+  RewriteRule .* - [F,L]
+
+  # Block access to specific files/paths to all users except stanford IP's.
+  # Each condition blocks unwanted access to all users at the apache level.
+  # This prevents drupal from bootstrapping. Most of these conditions are
+  # requested by bots or by user's cached requests.
+  RewriteCond %{REQUEST_URI} ^/simplesaml [OR]
+  RewriteCond %{REQUEST_URI} ^/update.php$ [OR]
+  RewriteCond %{REQUEST_URI} ^/core/install.php
+  # Only need to block on Acquia's environment. Local isn't a concern.
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (dev|test|prod|live)$
+  # The following path is always required to log into the site.
+  RewriteCond %{REQUEST_URI} !^/simplesaml/module.php/saml/sp/saml2-acs.php/default-sp
+  RewriteCond %{ENV:AH_Client_IP} !^127.0.0.1$
+  RewriteCond %{ENV:AH_Client_IP} !^171.66.21.182$
+  # Block the above conditions on acquia infrastructure.
+  # See https://httpd.apache.org/docs/2.4/rewrite/flags.html#flag_f.
+  RewriteRule .* - [F]
+
+  # Block access to WordPress URLs.
+  RewriteCond %{REQUEST_URI} "/wp-(admin|content/plugins/|includes|cron\.php|config\.php|login\.php|signup\.php)|xmlrpc.php" [NC]
+  RewriteRule .* - [F]
+
+  # Block access to URLs that malicious bots are probing.
+  RewriteCond %{REQUEST_URI} "/.*(uploadify.php|eval-stdin.php|sssp.pHp5|sssp.php.fla|sssp.php.pjpeg|sssp.phtml|upload.php|connector.minimal.php).*" [NC]
+  RewriteRule .* - [F]
+
+  # Ensure non-live sites prevent robots from crawling. This is similar to what
+  # Acquia Cloud does for the *.acquia-sites.com domains.
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (\d{2,})test [OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (\d{2,})dev [OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (\d{2,})testup [OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (\d{2,})devup [OR]
+  RewriteCond %{HTTP_HOST} \.acsitefactory\.com$ [NC]
+  RewriteCond %{REQUEST_URI} /robots.txt [NC]
+  RewriteRule ^ no_robots.txt [L]
+
+  # Rewrite URLs of the form foo.cardinalsites.acsitefactory.com to
+  # https://foo.sites.stanford.edu
+  # See https://stanfordits.atlassian.net/browse/SITES-129.
+  RewriteCond "%{HTTP_HOST}"   "^(.*)\.cardinalsites\.acsitefactory\.com" [NC]
+  RewriteRule "^/?(.*)"        "https://%1.sites.stanford.edu/$1" [L,R,NE]
+
+  # Test environment.
+  RewriteCond "%{HTTP_HOST}"   "^(.*)\.test-cardinalsites\.acsitefactory\.com" [NC]
+  RewriteRule "^/?(.*)"        "https://%1-test.sites.stanford.edu/$1" [L,R,NE]
+
+  # Dev environment.
+  RewriteCond "%{HTTP_HOST}"   "^(.*)\.dev-cardinalsites\.acsitefactory\.com" [NC]
+  RewriteRule "^/?(.*)"        "https://%1-dev.sites.stanford.edu/$1" [L,R,NE]
+
+  # Remote Administration environment.
+  RewriteCond "%{HTTP_HOST}"   "^(.*)\.acqra-cardinalsites\.acsitefactory\.com" [NC]
+  RewriteRule "^/?(.*)"        "https://%1-acqra.sites.stanford.edu/$1" [L,R,NE]
+
+  # Redirect HTTP to HTTPS on cloud
+  RewriteCond %{HTTP:X-Forwarded-Proto} !https
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} ^.*(dev|test|prod|live)$ [NC,OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} ^ode.*$ [NC]
+  RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [NE,L,R=301]
+
   # Set "protossl" to "s" if we were accessed via https://.  This is used later
   # if you enable "www." stripping or enforcement, in order to ensure that
   # you don't bounce between http and https.
@@ -126,6 +243,11 @@ AddEncoding gzip svgz
   RewriteCond %{REQUEST_URI} !core
   RewriteRule ^ %1/core/%2 [L,QSA,R=301]
 
+  # Redirect sso/login to saml_login
+  # Blame @jbickar if this turns out to be simplistic in the future.
+  # I tried to tell him on 3.18.2020 but nooooooo.
+  RewriteRule ^sso/login$ /saml_login [R=301,QSA,L]
+
   # Rewrite install.php during installation to see if mod_rewrite is working
   RewriteRule ^core/install\.php core/install.php?rewrite=ok [QSA,L]
 
@@ -144,10 +266,14 @@ AddEncoding gzip svgz
   RewriteCond %{REQUEST_URI} !/core/[^/]*\.php$
   # Allow access to test-specific PHP files:
   RewriteCond %{REQUEST_URI} !/core/modules/system/tests/https?\.php
+  # Allow access to simplesaml paths.
+  RewriteCond %{REQUEST_URI} !^/simplesaml
   # Allow access to Statistics module's custom front controller.
   # Copy and adapt this rule to directly execute PHP files in contributed or
   # custom modules or to run another PHP application in the same directory.
   RewriteCond %{REQUEST_URI} !/core/modules/statistics/statistics\.php$
+  # ACSF requirement: allow access to apc_rebuild.php.
+  RewriteCond %{REQUEST_URI} !/sites/g/apc_rebuild.php$
   # Deny access to any other PHP files that do not match the rules above.
   # Specifically, disallow autoload.php from being served directly.
   RewriteRule "^(.+/.*|autoload)\.php($|/)" - [F]
